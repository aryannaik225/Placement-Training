{
  "JavaScript": "Start by deeply understanding variables, data types, functions, arrays, objects, and loops. Focus on mastering DOM manipulation and events by building interactive UIs (like to-do lists, modals, or calculators). Learn ES6+ features such as arrow functions, destructuring, and async/await. Apply these concepts by working with real-world APIs (e.g., fetch weather data or GitHub profiles). Transition into using JavaScript frameworks like React once the fundamentals are strong. Focus on building projects, debugging, and writing clean code.",

  "Web Development": "Begin with a clear understanding of how the internet works: HTTP methods, status codes, and client-server architecture. Learn HTML, CSS, and JavaScript for the frontend, then choose a backend framework like Flask or Django to learn routing, templating, and handling forms. Understand REST APIs and how to connect frontend to backend. Use Git and GitHub for version control. Finally, deploy projects using free platforms like Vercel, Netlify, or Render to gain experience in hosting and deployment.",

  "SQL": "Start with core SQL commands: SELECT, INSERT, UPDATE, DELETE. Then focus on JOINs (INNER, LEFT, RIGHT), GROUP BY, and HAVING for relational queries. Work on public datasets using tools like SQLite, MySQL, or PostgreSQL. Practice writing complex queries using subqueries and window functions. Build mini data dashboards using SQL + Python or SQL + Excel to analyze real data. Understand database indexing and normalization to improve query performance and structure.",

  "Data Science": "Focus on learning Python libraries like pandas for data manipulation and seaborn/matplotlib for data visualization. Work on real-world datasets (from Kaggle, UCI, etc.) to perform exploratory data analysis (EDA). Learn the full ML workflow: data cleaning, preprocessing, model selection, and evaluation using scikit-learn. Avoid jumping into complex models early; focus on understanding concepts like overfitting, underfitting, bias-variance tradeoff, and cross-validation. Build at least 2 EDA + modeling projects to showcase your learning.",

  "Machine Learning": "Build strong intuition for ML by understanding problem types (classification, regression, clustering). Study core algorithms: linear regression, logistic regression, decision trees, and k-NN. Use scikit-learn to implement and experiment. Learn evaluation techniques (confusion matrix, ROC-AUC, precision/recall). Explore feature scaling, encoding, and data preprocessing techniques. Once comfortable, dive into ensemble methods (Random Forest, Gradient Boosting) and basics of neural networks with Keras or PyTorch. Work on one end-to-end ML project using real data with clear documentation and model justification.",

  "HTML/CSS": "Master semantic HTML and focus on structuring content properly. Then dive into CSS: learn box model, flexbox, and CSS Grid. Build responsive layouts that adapt across devices using media queries. Avoid relying too early on frameworks; instead, manually implement layouts to strengthen understanding. Afterward, explore Bootstrap or Tailwind for rapid prototyping. Build mini UI components like navbars, cards, and landing pages. Use tools like Figma to convert designs into real websites for practice.",

  "Python": "Build strong command over basic syntax: loops, conditionals, functions, lists, dictionaries, and string manipulations. Understand error handling, file I/O, and modules. Practice object-oriented programming (OOP) concepts and write reusable code. Use libraries like `requests`, `pandas`, `datetime`, and `os` to automate tasks. Work on CLI-based or small GUI-based tools to apply your knowledge. Build 2â€“3 small but complete Python projects (e.g., weather fetcher, file organizer, quiz app) to demonstrate applied understanding."
}